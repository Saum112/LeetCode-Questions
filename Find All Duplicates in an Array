// Bruteforce give  - TLE O(n2)

class Solution {
    public List<Integer> findDuplicates(int[] nums) {
        
        List<Integer>s = new ArrayList<Integer>();
        
        for(int i=0; i<nums.length; i++){
            
            for(int j = i-1 ; j>=0; j--){
                
                if(nums[i]==nums[j])
                    s.add(nums[i]);
            }
        }
        
        return s;
        
    }
}


// Sorting Approach - O(nlogn) 

class Solution {
    public List<Integer> findDuplicates(int[] nums) {
        
        List<Integer>s = new ArrayList<Integer>();
        
        Arrays.sort(nums);
        
        for(int i=0; i<nums.length-1; i++){
            
           if(nums[i]==nums[i+1])
               s.add(nums[i]);
            
        }
        
        return s;
        
    }
}


// Extra Space = O(n)  TC - O(n)

class Solution {
    public List<Integer> findDuplicates(int[] nums) {
        
        List<Integer>res = new ArrayList<Integer>();
        
        Set<Integer> s = new HashSet<Integer>(); 
        
        for(int i=0; i<nums.length; i++){
           
            if(s.contains(nums[i])){
                res.add(nums[i]);
                
            }
                s.add(nums[i]);
           
            
        }
        
        return res;
        
    }
}


// Efficient Approach 

class Solution {
    public List<Integer> findDuplicates(int[] nums) {
        
        List<Integer>res = new ArrayList<Integer>();
       
        for(int i =0; i<nums.length; i++){
            
            if(nums[Math.abs(nums[i])-1]<0)
                res.add(Math.abs(nums[i]));
            
            nums[Math.abs(nums[i])-1]  = -nums[Math.abs(nums[i])-1];
        }
        
        return res;
    }
}





